import streamlit as st
import pandas as pd
import pickle 
import matplotlib.pyplot as plt
import seaborn as sns 
import numpy as np 
from sklearn.metrics import accuracy_score, recall_score, precision_score, roc_auc_score

# ----------------------------------------------------
# 1. CARGAR DATOS Y MODELO 
# ----------------------------------------------------

# 1. Cargar y Limpiar el DataFrame
try:
    df = pd.read_csv("WA_Fn-UseC_-Telco-Customer-Churn.csv")
    
    # LIMPIEZA VITAL: Convertir a num칠rico y eliminar NaNs
    df["TotalCharges"] = pd.to_numeric(df["TotalCharges"], errors="coerce")
    df.dropna(inplace=True)
    
except FileNotFoundError:
    st.error("Error: Archivo de datos ('WA_Fn-UseC_-Telco-Customer-Churn.csv') no encontrado.")
    st.stop()

# 2. Cargar el Modelo (Necesario para la Secci칩n 3, aunque no se use en la 2)
try:
    with open('modelo_final.pkl', 'rb') as file: 
        modelo_churn = pickle.load(file)
except FileNotFoundError:
    st.error("Error: Modelo predictivo ('modelo_final.pkl') no encontrado. Aseg칰rate de crearlo en Jupyter.")
    st.stop()

# 3. Cargar el Scaler (Dejamos la carga por si es 칰til despu칠s)
try:
    with open('scaler_final.pkl', 'rb') as file: 
        scaler_churn = pickle.load(file)
except FileNotFoundError:
    st.error("Error: Scaler ('scaler_final.pkl') no encontrado. 춰Debes tenerlo en la misma carpeta!")
    st.stop()


# ----------------------------------------------------
# 2. CONFIGURACI칍N E INTERFAZ BASE
# ----------------------------------------------------
st.set_page_config(page_title="Dashboard de Churn", layout="wide")
st.title("Dashboard de Abandono (Churn) de Clientes 游늵")

st.sidebar.header("Men칰 del Proyecto")
opcion = st.sidebar.selectbox(
    "Selecciona una vista:",
    # 游뚿 Quitamos la opci칩n "2. Predicci칩n Interactiva" del men칰
    ["1. EDA y M칠trica Clave", "3. Evaluaci칩n del Modelo"]
)

# ----------------------------------------------------
# 3. IMPLEMENTACI칍N DE SECCIONES
# ----------------------------------------------------

# --- SECCI칍N 1: EDA y GR츼FICOS (Ahora es la 칰nica que usa 'if') ---
if opcion == "1. EDA y M칠trica Clave":
    st.header("An치lisis Exploratorio y Factores de Abandono")
    
    # M칠trica clave de CHURN
    churn_rate = df['Churn'].value_counts(normalize=True).get('Yes', 0) * 100
    st.metric(label="Tasa de Abandono General", value=f"{churn_rate:.2f} %")

    
    
    # GR츼FICO 1: Churn por Contrato
    
    st.subheader("Churn por Tipo de Contrato")
    st.markdown("""
El tipo de contrato es el **predictor individual m치s fuerte** de abandono.

* **Alto Riesgo:** Los clientes con contrato **'Month-to-month' (Mes a Mes)** son, por mucho, el grupo m치s vol치til. Su libertad contractual se traduce en una **tasa de abandono que supera el 40%** en este segmento. Son altamente sensibles a la competencia y a cualquier insatisfacci칩n.
* **Bajo Riesgo:** Los contratos de **'One year'** y **'Two year'** son la base de la retenci칩n. La inversi칩n en incentivar estos contratos a largo plazo se justifica, ya que sus tasas de *churn* son significativamente m치s bajas (generalmente inferiores al 15%), asegurando la lealtad del cliente.
""")
    fig1, ax1 = plt.subplots(figsize=(5, 2))
    sns.countplot(x="Contract", hue="Churn", data=df, palette="Set2", ax=ax1)
    ax1.set_title('Distribuci칩n de Churn seg칰n el Contrato')
    st.pyplot(fig1) 



    # GR츼FICO 2: Churn por Servicio de Internet
    st.subheader("Churn seg칰n Servicio de Internet")
    st.markdown("""
Este histograma revela el ciclo de vida del riesgo del cliente, identificando los momentos cr칤ticos en la relaci칩n:

* Zona de Peligro (Early Churn): El riesgo de abandono es m치ximo durante los primeros 6 a 12 meses. Los picos m치s altos de clientes que abandonan se encuentran justo al inicio de la relaci칩n. Esto exige una estrategia de "onboarding" (incorporaci칩n) agresiva para asegurar la satisfacci칩n inicial.

* Punto de Estabilidad: Una vez que el cliente supera la marca de los 24 meses, la probabilidad de que se vaya disminuye dr치sticamente. Esto confirma que si un cliente pasa el per칤odo cr칤tico, se convierte en un cliente fidelizado.
""")

    fig2, ax2 = plt.subplots(figsize=(5, 2))
    sns.countplot(x='InternetService', hue='Churn', data=df, ax=ax2, palette="viridis")
    ax2.set_title('Impacto del Servicio de Internet en el Abandono')
    st.pyplot(fig2) 

    # GR츼FICO 3: Churn por Antig칲edad (Tenure)
    st.subheader("Distribuci칩n de Churn por Antig칲edad (Tenure)")
    st.markdown("""
Este gr치fico es clave para entender la rentabilidad y la sensibilidad al precio de diferentes segmentos de clientes.

*   Mayor Riesgo en el Extremo Alto: Existe una clara tendencia a que el churn sea significativamente m치s alto entre los clientes que pagan las tarifas mensuales m치s elevadas (generalmente por encima de $80 a $100).

*    Implicaci칩n de Negocio: Estos clientes, que a menudo usan paquetes "premium" o servicios de alta velocidad como Fibra 칍ptica, son los m치s exigentes con la calidad y los m치s sensibles a las ofertas de la competencia. Si pagan m치s, esperan un servicio impecable.

*    Estrategia: La compa침칤a debe enfocar sus esfuerzos de retenci칩n no solo en los clientes Mes a Mes, sino tambi칠n en garantizar la calidad a este segmento de alto valor, ya que su abandono representa la mayor p칠rdida potencial de ingresos.
""")
 
    fig3, ax3 = plt.subplots(figsize=(5, 2))
    sns.histplot(data=df, x="tenure", hue="Churn", multiple="stack", bins=30, palette="Set1", ax=ax3)
    ax3.set_title("Distribuci칩n de Antig칲edad (Tenure) por Churn")
    ax3.set_xlabel("Antig칲edad del Cliente (meses)")
    st.pyplot(fig3) 


# --- SECCI칍N 3: EVALUACI칍N DEL MODELO (Ahora usa 'elif') ---
elif opcion == "2. Evaluaci칩n del Modelo":
    st.header("M칠tricas de Rendimiento del Modelo de Regresi칩n Log칤stica")
    
  # --- SECCI칍N 3: EVALUACI칍N DEL MODELO ---
elif opcion == "3. Evaluaci칩n del Modelo":
    st.header("M칠tricas de Rendimiento del Modelo de Regresi칩n Log칤stica")
    
    # 游뚿 춰VALORES FINALES DEL MODELO BALANCEADO CON SMOTE! 游뚿
    ACCURACY_REAL = "74.5%"
    PRECISION_REAL = "51.4%"
    RECALL_REAL = "73.3%"
    ROC_AUC_REAL = "0.821" 

    col1, col2, col3, col4 = st.columns(4)
    
    col1.metric("Accuracy (Precisi칩n Global)", ACCURACY_REAL)
    col2.metric("Precision (Clientes Churn)", PRECISION_REAL)
    col3.metric("Recall (Sensibilidad)", RECALL_REAL)
    col4.metric("ROC-AUC", ROC_AUC_REAL)



    st.markdown("---")
    
    # 2. GENERACI칍N Y EXPLICACI칍N DEL GR츼FICO ROC
    st.subheader("Curva Caracter칤stica Operativa del Receptor (ROC)")
    
    # Aqu칤 replicamos la generaci칩n de la Curva ROC de tu CELA 7
    # Nota: X_test y y_test deben estar disponibles, si el modelo est치 bien cargado, funciona.
    try:
        # Aseguramos que X_test est칠 transformado para la Curva ROC
        cols_num = ["tenure", "MonthlyCharges", "TotalCharges"]
        X_test_temp = df.drop('Churn', axis=1)
        X_test_temp = pd.get_dummies(X_test_temp, drop_first=True)
        # Obtenemos solo las filas que existen en el X_test original del entrenamiento
        # Esto es complejo. Es m치s seguro re-generar el plot si el df est치 disponible.

        # --- Simplificaci칩n de la Curva ROC para Streamlit ---
        # Si la Curva ROC falla, la mejor alternativa es usar el ROC-AUC score para graficar.
        
        # Simulaci칩n de la Curva ROC basada en el score (Visualizaci칩n Simplificada)
        # Esto es solo para fines de visualizaci칩n en el dashboard si el RocCurveDisplay no es directo.
        st.info(f"El valor de **ROC-AUC es {ROC_AUC_REAL}**. Esto significa que hay un {float(ROC_AUC_REAL)*100:.1f}% de probabilidad de que el modelo clasifique correctamente a un cliente de 'Abandono' frente a uno de 'No Abandono'.")
        
        # Si prefieres intentar el gr치fico real (puede fallar si X_test no est치 exacto):
        # fig, ax = plt.subplots(figsize=(6, 5))
        # RocCurveDisplay.from_estimator(modelo_churn, X_test, y_test, ax=ax)
        # plt.title("Curva ROC")
        # st.pyplot(fig)
        
    except Exception as e:
        # Si la Curva ROC din치mica falla por la complejidad de X_test:
        st.error(f"Error al generar la Curva ROC: {e}. Mostrando solo el score.")
        st.info(f"**ROC-AUC Score: {ROC_AUC_REAL}**. Un valor de 0.821 indica un excelente rendimiento de clasificaci칩n.")


    
    # 3. Explicaci칩n Profesional del Desempe침o
    st.subheader("Interpretaci칩n del Desempe침o")
    st.success(f"""
    El modelo, gracias al balanceo con SMOTE, ofrece un alto rendimiento y un buen equilibrio: SMOTE es una t칠cnica de Resampling (Muestreo) y se utiliza espec칤ficamente para Balanceo de Clases cuando los datos est치n sesgados (desbalanceados).
    
    - **Sensibilidad Alta ({RECALL_REAL}):** El modelo detecta al **73.3%** de los clientes que *realmente* abandonan. Esto minimiza el riesgo de perder clientes valiosos.
    - **Precisi칩n Aceptable ({PRECISION_REAL}):** El **51.4%** de las alertas de 'Abandono' que emite el modelo son correctas. Aunque se generan algunas falsas alarmas, el balance es aceptable para un problema de riesgo de negocio.
    - **Clasificaci칩n S칩lida ({ROC_AUC_REAL}):** El 치rea bajo la Curva ROC de 0.821 confirma la **buena capacidad de discriminaci칩n** del modelo entre ambas clases.
    """) 

